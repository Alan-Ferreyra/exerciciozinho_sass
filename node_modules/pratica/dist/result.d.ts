import { Maybe } from './maybe';
export declare type Result<O, E> = {
    ap: <A>(r: Result<A, E>) => Result<A, E>;
    map: <A>(cb: (arg: O) => A) => Result<A, E>;
    mapErr: <A>(cb: (arg: E) => A) => Result<O, A>;
    chain: <A>(cb: (arg: O) => Result<A, E>) => Result<A, E>;
    chainErr: <A>(cb: (arg: E) => Result<O, A>) => Result<O, A>;
    swap: () => Result<O, E>;
    bimap: <A, B>(ok: (arg: O) => A, err: (arg: E) => B) => Result<A, B>;
    cata: <A, B>(obj: {
        Ok: (arg: O) => A;
        Err: (arg: E) => B;
    }) => A | B;
    toMaybe: () => Maybe<O>;
    inspect: () => string;
    isErr: () => boolean;
    isOk: () => boolean;
    value: () => O | E;
};
export declare function Ok(): Result<any, any>;
export declare function Ok<O>(arg: O): Result<O, any>;
export declare function Err(): Result<any, any>;
export declare function Err<E>(arg: E): Result<any, E>;
