import { Result } from './result';
export declare type Maybe<A> = {
    ap: <B>(m: Maybe<any>) => Maybe<B>;
    map: <B>(cb: (arg: A) => B) => Maybe<B>;
    chain: <B>(cb: (arg: A) => Maybe<B>) => Maybe<B>;
    alt: <B>(value: B) => Maybe<A | B>;
    cata: <B, C>(obj: {
        Just: (arg: A) => B;
        Nothing: () => C;
    }) => B | C;
    toResult: () => Result<any, any>;
    inspect: () => string;
    isNothing: () => boolean;
    isJust: () => boolean;
    value: () => A | undefined;
};
export declare const Just: <A>(arg: A) => Maybe<A>;
export declare const Nothing: Maybe<any>;
export declare const nullable: <T>(arg?: T) => Maybe<NonNullable<T>>;
