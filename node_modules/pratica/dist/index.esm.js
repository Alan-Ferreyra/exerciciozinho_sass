var _Ok = function (arg) { return ({
    ap: function (r) { return typeof arg === 'function' ? r.map(function (x) { return arg(x); }) : Err(); },
    map: function (cb) { return _Ok(cb(arg)); },
    mapErr: function () { return _Ok(arg); },
    chain: function (cb) { return cb(arg); },
    chainErr: function () { return _Ok(arg); },
    swap: function () { return _Err(arg); },
    bimap: function (ok, _) { return _Ok(ok(arg)); },
    cata: function (obj) { return obj.Ok(arg); },
    toMaybe: function () { return nullable(arg); },
    inspect: function () { return "Ok(" + arg + ")"; },
    isErr: function () { return false; },
    isOk: function () { return true; },
    value: function () { return arg; }
}); };
var _Err = function (arg) { return ({
    ap: function () { return _Err(arg); },
    map: function () { return _Err(arg); },
    mapErr: function (cb) { return _Err(cb(arg)); },
    chain: function () { return _Err(arg); },
    chainErr: function (cb) { return cb(arg); },
    swap: function () { return _Ok(arg); },
    bimap: function (_, err) { return _Err(err(arg)); },
    cata: function (obj) { return obj.Err(arg); },
    toMaybe: function () { return Nothing; },
    inspect: function () { return "Err(" + arg + ")"; },
    isErr: function () { return true; },
    isOk: function () { return false; },
    value: function () { return arg; }
}); };
function Ok(arg) {
    return _Ok(arg);
}
function Err(arg) {
    return _Err(arg);
}

var Just = function (arg) { return ({
    ap: function (m) { return typeof arg === 'function' ? m.map(function (v) { return arg(v); }) : Nothing; },
    map: function (cb) { return Just(cb(arg)); },
    chain: function (cb) { return cb(arg); },
    alt: function () { return Just(arg); },
    cata: function (obj) { return obj.Just(arg); },
    toResult: function () { return Ok(arg); },
    inspect: function () { return "Just(" + arg + ")"; },
    isNothing: function () { return false; },
    isJust: function () { return true; },
    value: function () { return arg; }
}); };
var Nothing = ({
    ap: function () { return Nothing; },
    map: function () { return Nothing; },
    chain: function () { return Nothing; },
    alt: function (a) { return Just(a); },
    cata: function (obj) { return obj.Nothing(); },
    toResult: function () { return Err(); },
    inspect: function () { return "Nothing"; },
    isNothing: function () { return true; },
    isJust: function () { return false; },
    value: function () { return undefined; }
});
var nullable = function (arg) {
    return arg === null || arg === undefined
        ? Nothing
        : Just(arg);
};

var encase = function (func) {
    try {
        return Just(func());
    }
    catch (_a) {
        return Nothing;
    }
};
var encaseRes = function (func) {
    try {
        return Ok(func());
    }
    catch (e) {
        return Err(e);
    }
};

var get = function (selector) { return function (data) {
    return selector.reduce(function (acc, s) { return acc.chain(function (d) { return nullable(d[s]); }); }, nullable(data));
}; };

var head = function (arr) { return arr.length
    ? Just(arr[0])
    : Nothing; };

// justs: takes an array of maybes and filters out any non-just types
var justs = function (arr) {
    if (arr === void 0) { arr = []; }
    return arr.filter(function (a) { return a.isJust(); });
};

var last = function (arr) { return arr.length
    ? Just(arr[arr.length - 1])
    : Nothing; };

// oks: takes an array of Results and filters out any non-ok types
var oks = function (arr) {
    if (arr === void 0) { arr = []; }
    return arr.filter(function (a) { return a.isOk(); });
};

var parseDate = function (date) {
    return nullable(date)
        .map(function (d) { return new Date(d); })
        .chain(function (d) { return isNaN(d.valueOf()) ? Nothing : Just(d); });
};

var tail = function (arr) { return arr.length
    ? Just(arr.slice(1))
    : Nothing; };

var tryFind = function (exp) { return function (data) {
    return nullable(data.find(exp));
}; };

export { Err, Just, Nothing, Ok, encase, encaseRes, get, head, justs, last, nullable, oks, parseDate, tail, tryFind };
